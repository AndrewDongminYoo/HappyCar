require_relative '../node_modules/react-native/scripts/react_native_pods'
require_relative '../node_modules/@react-native-community/cli-platform-ios/native_modules'

# 호이스팅을 허용하도록 node 커맨드로 react_native_pods.rb를 resolve 합니다.
# 이 코드를 통해 앱이 안정적으로 동작하고, 버전 간 충돌이나 호환성 문제를 방지할 수 있습니다.
require Pod::Executable.execute_command('node', ['-p',
  'require.resolve(
    "react-native/scripts/react_native_pods.rb",
    {paths: [process.argv[1]]},
  )', __dir__]).strip

# ../node_modules/react-native/scripts/react_native_pods.rb#L40
platform :ios, min_ios_version_supported
# 이 함수는 프레임워크에 노출된 모든 타깃을 처리하기 전에 프로젝트를 준비합니다.
# `install! 'cocoapods', :deterministic_uuids => false`: 중복된 GUID 오류를 억제하기 위함.
# `ReactNativePodsUtils.create_xcode_env_if_missing`: ios/xcode.env 파일이 없을 경우 생성
# 포드 설치 외부에서 파일을 생성하도록 이동하면 제거할 수 있습니다.
# ../node_modules/react-native/scripts/react_native_pods.rb#L35
prepare_react_native_project!

# `react-native-flipper`를 사용하는 경우 `NO_FLIPPER=1`이 설정되면 iOS 빌드가 실패합니다.
# 왜냐하면 `react-native-flipper`는 제외될 예정인 FlipperKit에 의존하기 때문입니다.
# ../node_modules/react-native/scripts/cocoapods/flipper.rb#L91
#
# 이 문제를 해결하려면 `react-native.config.js`를 사용하여 `react-native-flipper`를 제외할 수도 있습니다.
# ```js
# module.exports = {
#   dependencies: {
#     ...(process.env.NO_FLIPPER ? { 'react-native-flipper': { platforms: { ios: null } } } : {}),
# ```
flipper_config = ENV['NO_FLIPPER'] == "1" ? FlipperConfiguration.disabled : FlipperConfiguration.enabled

linkage = ENV['USE_FRAMEWORKS']
if linkage != nil
  Pod::UI.puts "Configuring Pod with #{linkage}ally linked Frameworks".green
  use_frameworks! :linkage => linkage.to_sym
end

target 'HappyCar' do
  # 현재 대상의 플랫폼을 지원하지 않는 파드를 건너뜁니다.
  # current_target_definition.platform
  # Note: 지원되는 `platform`을 정의하기 전에 `use_native_modules!`를 호출할 수 없습니다.
  # ../node_modules/@react-native-community/cli-platform-ios/native_modules.rb#L15
  config = use_native_modules!

  # 'RCT_NEW_ARCH_ENABLED 및 USE_HERMES 환경변수 설정 값에 따라 변경되는 플래그입니다.
  # ../node_modules/react-native/scripts/cocoapods/utils.rb#L19
  flags = get_default_flags()

  # ../node_modules/react-native/scripts/react_native_pods.rb#L55
  use_react_native!(
    :path => config[:reactNativePath],
    # 이제 헤르메스가 리액트 네이티브에서 기본적으로 활성화됩니다. 이 플래그를 false로 설정하면 비활성화할 수 있습니다.
    # 향후 React Native 버전에서는 get_default_flags()에 의존할 수 있습니다.
    # 하지만, React Native 버전 업그레이드 프로세스를 돕기 위해 여기에 명시적으로 설명합니다.
    :hermes_enabled => flags[:hermes_enabled],
    :fabric_enabled => flags[:fabric_enabled],
    # 플리퍼를 활성화합니다.
    #
    # 만일 use_frameworks!를 활성화한 경우 Flipper가 작동하지 않으므로 다음 줄을 주석 처리해야 합니다.
    :flipper_configuration => flipper_config,
    # 애플리케이션 루트에 대한 절대 경로입니다.
    :app_path => "#{Pod::Config.instance.installation_root}/.."
  )

  target 'HappyCarTests' do
    inherit! :complete
    # Pods for testing
  end

  post_install do |installer|
    # # 일부 플래그와 빌드 설정을 구성하기 위해 React Native를 설치한 후 실행하는 함수입니다.
    #
    # Parameters
    # - installer: 프로젝트를 커스터마이징할 수 있는 코코아팟 객체입니다.
    # - react_native_path: React Native의 경로를 직접 설정하고자 하는 경우 사용할 수 있습니다.
    # - mac_catalyst_enabled: Mac Catalyst 프로젝트에서 Pod를 실행할지 여부.
    # - enable_hermes_profiler: 헤르메스 프로파일러를 릴리스 모드에서 지 여부.
    # ../node_modules/react-native/scripts/react_native_pods.rb#L206
    react_native_post_install(
      installer,
      config[:reactNativePath],

      # Mac 카탈리스트 빌드에 필요한 패치를 적용하려면 `mac_catalyst_enabled`를 `true`로 설정합니다.
      :mac_catalyst_enabled => false
    )
    __apply_Xcode_12_5_M1_post_install_workaround(installer)
  end
end
